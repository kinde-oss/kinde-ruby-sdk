# frozen_string_literal: true

# #Kinde Management API
#
# Provides endpoints to manage your Kinde Businesses
#
# The version of the OpenAPI document: 1
# Contact: support@kinde.com
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.0.0-SNAPSHOT
#

require 'cgi'

module KindeApi
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create User
    # Creates a user record and optionally zero or more identities for the user. An example identity could be the email address of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserRequest] :create_user_request The details of the user to create.
    # @return [CreateUserResponse]
    def create_user(opts = {})
      data, _status_code, _headers = create_user_with_http_info(opts)
      data
    end

    # Create User
    # Creates a user record and optionally zero or more identities for the user. An example identity could be the email address of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateUserRequest] :create_user_request The details of the user to create.
    # @return [Array<(CreateUserResponse, Integer, Hash)>] CreateUserResponse data, response status code and response headers
    def create_user_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: UsersApi.create_user ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/api/v1/user'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:create_user_request])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"UsersApi.create_user",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete User
    # Delete a user record.
    # @param id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :is_delete_profile Delete all data and remove the user&#39;s profile from all of Kinde, including the subscriber list
    # @return [SuccessResponse]
    def delete_user(id, opts = {})
      data, _status_code, _headers = delete_user_with_http_info(id, opts)
      data
    end

    # Delete User
    # Delete a user record.
    # @param id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :is_delete_profile Delete all data and remove the user&#39;s profile from all of Kinde, including the subscriber list
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_user_with_http_info(id, opts = {})
      @api_client.config.logger.debug 'Calling API: UsersApi.delete_user ...' if @api_client.config.debugging
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.delete_user"
      end

      # resource path
      local_var_path = '/api/v1/user'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:id] = id
      query_params[:is_delete_profile] = opts[:is_delete_profile] unless opts[:is_delete_profile].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"UsersApi.delete_user",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get User
    # Retrieve a user record.
    # @param id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;organizations\&quot; and/or \&quot;identities\&quot;.
    # @return [User]
    def get_user_data(id, opts = {})
      data, _status_code, _headers = get_user_data_with_http_info(id, opts)
      data
    end

    # Get User
    # Retrieve a user record.
    # @param id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;organizations\&quot; and/or \&quot;identities\&quot;.
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_user_data_with_http_info(id, opts = {})
      @api_client.config.logger.debug 'Calling API: UsersApi.get_user_data ...' if @api_client.config.debugging
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.get_user_data"
      end

      # resource path
      local_var_path = '/api/v1/user'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:id] = id
      query_params[:expand] = opts[:expand] unless opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"UsersApi.get_user_data",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_user_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Users
    # The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :user_id ID of the user to filter by.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @option opts [String] :email Filter the results by email address. The query string should be comma separated and url encoded.
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;organizations\&quot; and/or \&quot;identities\&quot;.
    # @return [UsersResponse]
    def get_users(opts = {})
      data, _status_code, _headers = get_users_with_http_info(opts)
      data
    end

    # List Users
    # The returned list can be sorted by full name or email address in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :user_id ID of the user to filter by.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @option opts [String] :email Filter the results by email address. The query string should be comma separated and url encoded.
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;organizations\&quot; and/or \&quot;identities\&quot;.
    # @return [Array<(UsersResponse, Integer, Hash)>] UsersResponse data, response status code and response headers
    def get_users_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: UsersApi.get_users ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/api/v1/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:page_size] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:user_id] = opts[:user_id] unless opts[:user_id].nil?
      query_params[:next_token] = opts[:next_token] unless opts[:next_token].nil?
      query_params[:email] = opts[:email] unless opts[:email].nil?
      query_params[:expand] = opts[:expand] unless opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"UsersApi.get_users",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Refresh User Claims and Invalidate Cache
    # Refreshes the user's claims and invalidates the current cache.
    # @param user_id [String] The id of the user whose claims needs to be updated.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def refresh_user_claims(user_id, opts = {})
      data, _status_code, _headers = refresh_user_claims_with_http_info(user_id, opts)
      data
    end

    # Refresh User Claims and Invalidate Cache
    # Refreshes the user&#39;s claims and invalidates the current cache.
    # @param user_id [String] The id of the user whose claims needs to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def refresh_user_claims_with_http_info(user_id, opts = {})
      @api_client.config.logger.debug 'Calling API: UsersApi.refresh_user_claims ...' if @api_client.config.debugging
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError, "Missing the required parameter 'user_id' when calling UsersApi.refresh_user_claims"
      end

      # resource path
      local_var_path = '/api/v1/users/{user_id}/refresh_claims'.sub('{user_id}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json; charset=utf-8', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"UsersApi.refresh_user_claims",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#refresh_user_claims\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update User
    # Update a user record.
    # @param id [String] The user&#39;s id.
    # @param update_user_request [UpdateUserRequest] The user to update.
    # @param [Hash] opts the optional parameters
    # @return [UpdateUserResponse]
    def update_user(id, update_user_request, opts = {})
      data, _status_code, _headers = update_user_with_http_info(id, update_user_request, opts)
      data
    end

    # Update User
    # Update a user record.
    # @param id [String] The user&#39;s id.
    # @param update_user_request [UpdateUserRequest] The user to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateUserResponse, Integer, Hash)>] UpdateUserResponse data, response status code and response headers
    def update_user_with_http_info(id, update_user_request, opts = {})
      @api_client.config.logger.debug 'Calling API: UsersApi.update_user ...' if @api_client.config.debugging
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError, "Missing the required parameter 'id' when calling UsersApi.update_user"
      end
      # verify the required parameter 'update_user_request' is set
      if @api_client.config.client_side_validation && update_user_request.nil?
        raise ArgumentError, "Missing the required parameter 'update_user_request' when calling UsersApi.update_user"
      end

      # resource path
      local_var_path = '/api/v1/user'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:id] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateUserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"UsersApi.update_user",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update User Feature Flag Override
    # Update user feature flag override.
    # @param user_id [String] The identifier for the user
    # @param feature_flag_key [String] The identifier for the feature flag
    # @param value [String] Override value
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def update_user_feature_flag_override(user_id, feature_flag_key, value, opts = {})
      data, _status_code, _headers = update_user_feature_flag_override_with_http_info(user_id, feature_flag_key, value,
                                                                                      opts)
      data
    end

    # Update User Feature Flag Override
    # Update user feature flag override.
    # @param user_id [String] The identifier for the user
    # @param feature_flag_key [String] The identifier for the feature flag
    # @param value [String] Override value
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_user_feature_flag_override_with_http_info(user_id, feature_flag_key, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_user_feature_flag_override ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'user_id' when calling UsersApi.update_user_feature_flag_override"
      end
      # verify the required parameter 'feature_flag_key' is set
      if @api_client.config.client_side_validation && feature_flag_key.nil?
        raise ArgumentError,
              "Missing the required parameter 'feature_flag_key' when calling UsersApi.update_user_feature_flag_override"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        raise ArgumentError,
              "Missing the required parameter 'value' when calling UsersApi.update_user_feature_flag_override"
      end

      # resource path
      local_var_path = '/api/v1/users/{user_id}/feature_flags/{feature_flag_key}'.sub('{user_id}', CGI.escape(user_id.to_s)).sub(
        '{feature_flag_key}', CGI.escape(feature_flag_key.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:value] = value

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"UsersApi.update_user_feature_flag_override",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_user_feature_flag_override\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
