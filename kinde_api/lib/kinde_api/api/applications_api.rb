# frozen_string_literal: true

# #Kinde Management API
#
# Provides endpoints to manage your Kinde Businesses
#
# The version of the OpenAPI document: 1
# Contact: support@kinde.com
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.0.0-SNAPSHOT
#

require 'cgi'

module KindeApi
  class ApplicationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Application
    # Create an application.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateApplicationRequest] :create_application_request Application details.
    # @return [CreateApplicationResponse]
    def create_application(opts = {})
      data, _status_code, _headers = create_application_with_http_info(opts)
      data
    end

    # Create Application
    # Create an application.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateApplicationRequest] :create_application_request Application details.
    # @return [Array<(CreateApplicationResponse, Integer, Hash)>] CreateApplicationResponse data, response status code and response headers
    def create_application_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.create_application ...'
      end
      # resource path
      local_var_path = '/api/v1/applications'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:create_application_request])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateApplicationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"ApplicationsApi.create_application",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#create_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete Application
    # Delete application.
    # @param application_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_application(application_id, opts = {})
      data, _status_code, _headers = delete_application_with_http_info(application_id, opts)
      data
    end

    # Delete Application
    # Delete application.
    # @param application_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_application_with_http_info(application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.delete_application ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'application_id' when calling ApplicationsApi.delete_application"
      end

      # resource path
      local_var_path = '/api/v1/applications/{application_id}'.sub('{application_id}',
                                                                   CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"ApplicationsApi.delete_application",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#delete_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Application
    # Gets an application given the application's id.
    # @param application_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [GetApplicationResponse]
    def get_application(application_id, opts = {})
      data, _status_code, _headers = get_application_with_http_info(application_id, opts)
      data
    end

    # Get Application
    # Gets an application given the application&#39;s id.
    # @param application_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetApplicationResponse, Integer, Hash)>] GetApplicationResponse data, response status code and response headers
    def get_application_with_http_info(application_id, opts = {})
      @api_client.config.logger.debug 'Calling API: ApplicationsApi.get_application ...' if @api_client.config.debugging
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'application_id' when calling ApplicationsApi.get_application"
      end

      # resource path
      local_var_path = '/api/v1/applications/{application_id}'.sub('{application_id}',
                                                                   CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetApplicationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"ApplicationsApi.get_application",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#get_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Applications
    # Get a list of applications.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @return [GetApplicationsResponse]
    def get_applications(opts = {})
      data, _status_code, _headers = get_applications_with_http_info(opts)
      data
    end

    # List Applications
    # Get a list of applications.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @return [Array<(GetApplicationsResponse, Integer, Hash)>] GetApplicationsResponse data, response status code and response headers
    def get_applications_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.get_applications ...'
      end
      allowable_values = %w[name_asc name_desc]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/api/v1/applications'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:page_size] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:next_token] = opts[:next_token] unless opts[:next_token].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetApplicationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"ApplicationsApi.get_applications",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#get_applications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update Application
    # Update an application.
    # @param application_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateApplicationRequest] :update_application_request Application details.
    # @return [nil]
    def update_application(application_id, opts = {})
      update_application_with_http_info(application_id, opts)
      nil
    end

    # Update Application
    # Update an application.
    # @param application_id [String] The identifier for the application.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateApplicationRequest] :update_application_request Application details.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_application_with_http_info(application_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationsApi.update_application ...'
      end
      # verify the required parameter 'application_id' is set
      if @api_client.config.client_side_validation && application_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'application_id' when calling ApplicationsApi.update_application"
      end

      # resource path
      local_var_path = '/api/v1/applications/{application_id}'.sub('{application_id}',
                                                                   CGI.escape(application_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:update_application_request])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"ApplicationsApi.update_application",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationsApi#update_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
