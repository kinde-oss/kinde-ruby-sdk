# frozen_string_literal: true

# #Kinde Management API
#
# Provides endpoints to manage your Kinde Businesses
#
# The version of the OpenAPI document: 1
# Contact: support@kinde.com
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.0.0-SNAPSHOT
#

require 'cgi'

module KindeApi
  class RolesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create Role
    # Create role.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateRoleRequest] :create_role_request Role details.
    # @return [SuccessResponse]
    def create_role(opts = {})
      data, _status_code, _headers = create_role_with_http_info(opts)
      data
    end

    # Create Role
    # Create role.
    # @param [Hash] opts the optional parameters
    # @option opts [CreateRoleRequest] :create_role_request Role details.
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def create_role_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: RolesApi.create_role ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/api/v1/roles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:create_role_request])

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"RolesApi.create_role",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#create_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete Role
    # Delete role
    # @param role_id [String] The identifier for the role.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_role(role_id, opts = {})
      data, _status_code, _headers = delete_role_with_http_info(role_id, opts)
      data
    end

    # Delete Role
    # Delete role
    # @param role_id [String] The identifier for the role.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_role_with_http_info(role_id, opts = {})
      @api_client.config.logger.debug 'Calling API: RolesApi.delete_role ...' if @api_client.config.debugging
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        raise ArgumentError, "Missing the required parameter 'role_id' when calling RolesApi.delete_role"
      end

      # resource path
      local_var_path = '/api/v1/roles/{role_id}'.sub('{role_id}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"RolesApi.delete_role",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#delete_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Role Permissions
    # Get permissions for a role.
    # @param role_id [String] The role&#39;s public id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @return [Array<RolesPermissionResponseInner>]
    def get_role_permission(role_id, opts = {})
      data, _status_code, _headers = get_role_permission_with_http_info(role_id, opts)
      data
    end

    # Get Role Permissions
    # Get permissions for a role.
    # @param role_id [String] The role&#39;s public id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @return [Array<(Array<RolesPermissionResponseInner>, Integer, Hash)>] Array<RolesPermissionResponseInner> data, response status code and response headers
    def get_role_permission_with_http_info(role_id, opts = {})
      @api_client.config.logger.debug 'Calling API: RolesApi.get_role_permission ...' if @api_client.config.debugging
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        raise ArgumentError, "Missing the required parameter 'role_id' when calling RolesApi.get_role_permission"
      end

      allowable_values = %w[name_asc name_desc id_asc id_desc]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/api/v1/roles/{role_id}/permissions'.sub('{role_id}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:page_size] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:next_token] = opts[:next_token] unless opts[:next_token].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RolesPermissionResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"RolesApi.get_role_permission",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_role_permission\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Roles
    # The returned list can be sorted by role name or role ID in ascending or descending order. The number of records to return at a time can also be controlled using the `page_size` query string parameter.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @return [GetRolesResponse]
    def get_roles(opts = {})
      data, _status_code, _headers = get_roles_with_http_info(opts)
      data
    end

    # List Roles
    # The returned list can be sorted by role name or role ID in ascending or descending order. The number of records to return at a time can also be controlled using the &#x60;page_size&#x60; query string parameter.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @return [Array<(GetRolesResponse, Integer, Hash)>] GetRolesResponse data, response status code and response headers
    def get_roles_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: RolesApi.get_roles ...' if @api_client.config.debugging
      allowable_values = %w[name_asc name_desc id_asc id_desc]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/api/v1/roles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:page_size] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:next_token] = opts[:next_token] unless opts[:next_token].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRolesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"RolesApi.get_roles",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#get_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Remove Role Permission
    # Remove a permission from a role.
    # @param role_id [String] The role&#39;s public id.
    # @param permission_id [String] The permission&#39;s public id.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def remove_role_permission(role_id, permission_id, opts = {})
      data, _status_code, _headers = remove_role_permission_with_http_info(role_id, permission_id, opts)
      data
    end

    # Remove Role Permission
    # Remove a permission from a role.
    # @param role_id [String] The role&#39;s public id.
    # @param permission_id [String] The permission&#39;s public id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def remove_role_permission_with_http_info(role_id, permission_id, opts = {})
      @api_client.config.logger.debug 'Calling API: RolesApi.remove_role_permission ...' if @api_client.config.debugging
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        raise ArgumentError, "Missing the required parameter 'role_id' when calling RolesApi.remove_role_permission"
      end

      # verify the required parameter 'permission_id' is set
      if @api_client.config.client_side_validation && permission_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'permission_id' when calling RolesApi.remove_role_permission"
      end

      # resource path
      local_var_path = '/api/v1/roles/{role_id}/permissions/{permission_id}'.sub('{role_id}', CGI.escape(role_id.to_s)).sub(
        '{permission_id}', CGI.escape(permission_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"RolesApi.remove_role_permission",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#remove_role_permission\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update Role Permissions
    # Update role permissions.
    # @param role_id [String] The identifier for the role.
    # @param update_role_permissions_request [UpdateRolePermissionsRequest]
    # @param [Hash] opts the optional parameters
    # @return [UpdateRolePermissionsResponse]
    def update_role_permissions(role_id, update_role_permissions_request, opts = {})
      data, _status_code, _headers = update_role_permissions_with_http_info(role_id, update_role_permissions_request,
                                                                            opts)
      data
    end

    # Update Role Permissions
    # Update role permissions.
    # @param role_id [String] The identifier for the role.
    # @param update_role_permissions_request [UpdateRolePermissionsRequest]
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateRolePermissionsResponse, Integer, Hash)>] UpdateRolePermissionsResponse data, response status code and response headers
    def update_role_permissions_with_http_info(role_id, update_role_permissions_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RolesApi.update_role_permissions ...'
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        raise ArgumentError, "Missing the required parameter 'role_id' when calling RolesApi.update_role_permissions"
      end

      # verify the required parameter 'update_role_permissions_request' is set
      if @api_client.config.client_side_validation && update_role_permissions_request.nil?
        raise ArgumentError,
              "Missing the required parameter 'update_role_permissions_request' when calling RolesApi.update_role_permissions"
      end

      # resource path
      local_var_path = '/api/v1/roles/{role_id}/permissions'.sub('{role_id}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_role_permissions_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateRolePermissionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"RolesApi.update_role_permissions",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#update_role_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update Role
    # Update a role
    # @param role_id [String] The identifier for the role.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateRolesRequest] :update_roles_request Role details.
    # @return [SuccessResponse]
    def update_roles(role_id, opts = {})
      data, _status_code, _headers = update_roles_with_http_info(role_id, opts)
      data
    end

    # Update Role
    # Update a role
    # @param role_id [String] The identifier for the role.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateRolesRequest] :update_roles_request Role details.
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_roles_with_http_info(role_id, opts = {})
      @api_client.config.logger.debug 'Calling API: RolesApi.update_roles ...' if @api_client.config.debugging
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        raise ArgumentError, "Missing the required parameter 'role_id' when calling RolesApi.update_roles"
      end

      # resource path
      local_var_path = '/api/v1/roles/{role_id}'.sub('{role_id}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:update_roles_request])

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"RolesApi.update_roles",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RolesApi#update_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
