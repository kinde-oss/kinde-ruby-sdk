# frozen_string_literal: true

# #Kinde Management API
#
# Provides endpoints to manage your Kinde Businesses
#
# The version of the OpenAPI document: 1
# Contact: support@kinde.com
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.0.0-SNAPSHOT
#

require 'cgi'

module KindeApi
  class OrganizationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add Organization Users
    # Add existing users to an organization.
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @option opts [AddOrganizationUsersRequest] :add_organization_users_request
    # @return [AddOrganizationUsersResponse]
    def add_organization_users(org_code, opts = {})
      data, _status_code, _headers = add_organization_users_with_http_info(org_code, opts)
      data
    end

    # Add Organization Users
    # Add existing users to an organization.
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @option opts [AddOrganizationUsersRequest] :add_organization_users_request
    # @return [Array<(AddOrganizationUsersResponse, Integer, Hash)>] AddOrganizationUsersResponse data, response status code and response headers
    def add_organization_users_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.add_organization_users ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.add_organization_users"
      end

      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users'.sub('{org_code}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:add_organization_users_request])

      # return_type
      return_type = opts[:debug_return_type] || 'AddOrganizationUsersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.add_organization_users",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#add_organization_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Create Organization
    # Create an organization.
    # @param create_organization_request [CreateOrganizationRequest] Organization details.
    # @param [Hash] opts the optional parameters
    # @return [CreateOrganizationResponse]
    def create_organization(create_organization_request, opts = {})
      data, _status_code, _headers = create_organization_with_http_info(create_organization_request, opts)
      data
    end

    # Create Organization
    # Create an organization.
    # @param create_organization_request [CreateOrganizationRequest] Organization details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateOrganizationResponse, Integer, Hash)>] CreateOrganizationResponse data, response status code and response headers
    def create_organization_with_http_info(create_organization_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.create_organization ...'
      end
      # verify the required parameter 'create_organization_request' is set
      if @api_client.config.client_side_validation && create_organization_request.nil?
        raise ArgumentError,
              "Missing the required parameter 'create_organization_request' when calling OrganizationsApi.create_organization"
      end

      # resource path
      local_var_path = '/api/v1/organization'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_organization_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateOrganizationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.create_organization",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#create_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Add Organization User Permission
    # Add permission to an organization user.
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param create_organization_user_permission_request [CreateOrganizationUserPermissionRequest] Permission details.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def create_organization_user_permission(org_code, user_id, create_organization_user_permission_request, opts = {})
      data, _status_code, _headers = create_organization_user_permission_with_http_info(org_code, user_id,
                                                                                        create_organization_user_permission_request, opts)
      data
    end

    # Add Organization User Permission
    # Add permission to an organization user.
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param create_organization_user_permission_request [CreateOrganizationUserPermissionRequest] Permission details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def create_organization_user_permission_with_http_info(org_code, user_id,
                                                           create_organization_user_permission_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.create_organization_user_permission ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.create_organization_user_permission"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'user_id' when calling OrganizationsApi.create_organization_user_permission"
      end
      # verify the required parameter 'create_organization_user_permission_request' is set
      if @api_client.config.client_side_validation && create_organization_user_permission_request.nil?
        raise ArgumentError,
              "Missing the required parameter 'create_organization_user_permission_request' when calling OrganizationsApi.create_organization_user_permission"
      end

      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/permissions'.sub('{org_code}', CGI.escape(org_code.to_s)).sub(
        '{user_id}', CGI.escape(user_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_organization_user_permission_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.create_organization_user_permission",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#create_organization_user_permission\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Add Organization User Role
    # Add role to an organization user.
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param create_organization_user_role_request [CreateOrganizationUserRoleRequest] Role details.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def create_organization_user_role(org_code, user_id, create_organization_user_role_request, opts = {})
      data, _status_code, _headers = create_organization_user_role_with_http_info(org_code, user_id,
                                                                                  create_organization_user_role_request, opts)
      data
    end

    # Add Organization User Role
    # Add role to an organization user.
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param create_organization_user_role_request [CreateOrganizationUserRoleRequest] Role details.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def create_organization_user_role_with_http_info(org_code, user_id, create_organization_user_role_request,
                                                     opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.create_organization_user_role ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.create_organization_user_role"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'user_id' when calling OrganizationsApi.create_organization_user_role"
      end
      # verify the required parameter 'create_organization_user_role_request' is set
      if @api_client.config.client_side_validation && create_organization_user_role_request.nil?
        raise ArgumentError,
              "Missing the required parameter 'create_organization_user_role_request' when calling OrganizationsApi.create_organization_user_role"
      end

      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/roles'.sub('{org_code}', CGI.escape(org_code.to_s)).sub(
        '{user_id}', CGI.escape(user_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_organization_user_role_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.create_organization_user_role",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#create_organization_user_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete Organization
    # Delete an organization.
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_organization(org_code, opts = {})
      delete_organization_with_http_info(org_code, opts)
      nil
    end

    # Delete Organization
    # Delete an organization.
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_organization_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_organization ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.delete_organization"
      end

      # resource path
      local_var_path = '/api/v1/organization/{org_code}'.sub('{org_code}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.delete_organization",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete Organization Feature Flag Override
    # Delete organization feature flag override.
    # @param org_code [String] The identifier for the organization.
    # @param feature_flag_key [String] The identifier for the feature flag.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_organization_feature_flag_override(org_code, feature_flag_key, opts = {})
      data, _status_code, _headers = delete_organization_feature_flag_override_with_http_info(org_code,
                                                                                              feature_flag_key, opts)
      data
    end

    # Delete Organization Feature Flag Override
    # Delete organization feature flag override.
    # @param org_code [String] The identifier for the organization.
    # @param feature_flag_key [String] The identifier for the feature flag.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_organization_feature_flag_override_with_http_info(org_code, feature_flag_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_organization_feature_flag_override ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.delete_organization_feature_flag_override"
      end
      # verify the required parameter 'feature_flag_key' is set
      if @api_client.config.client_side_validation && feature_flag_key.nil?
        raise ArgumentError,
              "Missing the required parameter 'feature_flag_key' when calling OrganizationsApi.delete_organization_feature_flag_override"
      end

      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}'.sub('{org_code}', CGI.escape(org_code.to_s)).sub(
        '{feature_flag_key}', CGI.escape(feature_flag_key.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.delete_organization_feature_flag_override",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_organization_feature_flag_override\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete Organization Feature Flag Overrides
    # Delete all organization feature flag overrides.
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_organization_feature_flag_overrides(org_code, opts = {})
      data, _status_code, _headers = delete_organization_feature_flag_overrides_with_http_info(org_code, opts)
      data
    end

    # Delete Organization Feature Flag Overrides
    # Delete all organization feature flag overrides.
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_organization_feature_flag_overrides_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_organization_feature_flag_overrides ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.delete_organization_feature_flag_overrides"
      end

      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/feature_flags'.sub('{org_code}',
                                                                            CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.delete_organization_feature_flag_overrides",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_organization_feature_flag_overrides\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete Organization User Permission
    # Delete permission for an organization user.
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param permission_id [String] The permission id.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_organization_user_permission(org_code, user_id, permission_id, opts = {})
      data, _status_code, _headers = delete_organization_user_permission_with_http_info(org_code, user_id,
                                                                                        permission_id, opts)
      data
    end

    # Delete Organization User Permission
    # Delete permission for an organization user.
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param permission_id [String] The permission id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_organization_user_permission_with_http_info(org_code, user_id, permission_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_organization_user_permission ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.delete_organization_user_permission"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'user_id' when calling OrganizationsApi.delete_organization_user_permission"
      end
      # verify the required parameter 'permission_id' is set
      if @api_client.config.client_side_validation && permission_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'permission_id' when calling OrganizationsApi.delete_organization_user_permission"
      end

      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/permissions/{permission_id}'.sub('{org_code}', CGI.escape(org_code.to_s)).sub('{user_id}', CGI.escape(user_id.to_s)).sub(
        '{permission_id}', CGI.escape(permission_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.delete_organization_user_permission",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_organization_user_permission\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Delete Organization User Role
    # Delete role for an organization user.
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param role_id [String] The role id.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_organization_user_role(org_code, user_id, role_id, opts = {})
      data, _status_code, _headers = delete_organization_user_role_with_http_info(org_code, user_id, role_id, opts)
      data
    end

    # Delete Organization User Role
    # Delete role for an organization user.
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param role_id [String] The role id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def delete_organization_user_role_with_http_info(org_code, user_id, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.delete_organization_user_role ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.delete_organization_user_role"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'user_id' when calling OrganizationsApi.delete_organization_user_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'role_id' when calling OrganizationsApi.delete_organization_user_role"
      end

      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/roles/{role_id}'.sub('{org_code}', CGI.escape(org_code.to_s)).sub('{user_id}', CGI.escape(user_id.to_s)).sub(
        '{role_id}', CGI.escape(role_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.delete_organization_user_role",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#delete_organization_user_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Organization
    # Gets an organization given the organization's code.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code The organization&#39;s code.
    # @return [Organization]
    def get_organization(opts = {})
      data, _status_code, _headers = get_organization_with_http_info(opts)
      data
    end

    # Get Organization
    # Gets an organization given the organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :code The organization&#39;s code.
    # @return [Array<(Organization, Integer, Hash)>] Organization data, response status code and response headers
    def get_organization_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization ...'
      end
      # resource path
      local_var_path = '/api/v1/organization'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:code] = opts[:code] unless opts[:code].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Organization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.get_organization",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Organization Feature Flags
    # Get all organization feature flags.
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @return [GetOrganizationFeatureFlagsResponse]
    def get_organization_feature_flags(org_code, opts = {})
      data, _status_code, _headers = get_organization_feature_flags_with_http_info(org_code, opts)
      data
    end

    # List Organization Feature Flags
    # Get all organization feature flags.
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetOrganizationFeatureFlagsResponse, Integer, Hash)>] GetOrganizationFeatureFlagsResponse data, response status code and response headers
    def get_organization_feature_flags_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization_feature_flags ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.get_organization_feature_flags"
      end

      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/feature_flags'.sub('{org_code}',
                                                                            CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationFeatureFlagsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.get_organization_feature_flags",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization_feature_flags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Organization User Permissions
    # Get permissions for an organization user.
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;roles\&quot;.
    # @return [GetOrganizationsUserPermissionsResponse]
    def get_organization_user_permissions(org_code, user_id, opts = {})
      data, _status_code, _headers = get_organization_user_permissions_with_http_info(org_code, user_id, opts)
      data
    end

    # List Organization User Permissions
    # Get permissions for an organization user.
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand Specify additional data to retrieve. Use \&quot;roles\&quot;.
    # @return [Array<(GetOrganizationsUserPermissionsResponse, Integer, Hash)>] GetOrganizationsUserPermissionsResponse data, response status code and response headers
    def get_organization_user_permissions_with_http_info(org_code, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization_user_permissions ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.get_organization_user_permissions"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'user_id' when calling OrganizationsApi.get_organization_user_permissions"
      end

      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/permissions'.sub('{org_code}', CGI.escape(org_code.to_s)).sub(
        '{user_id}', CGI.escape(user_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:expand] = opts[:expand] unless opts[:expand].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationsUserPermissionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.get_organization_user_permissions",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization_user_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Organization User Roles
    # Get roles for an organization user.
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [GetOrganizationsUserRolesResponse]
    def get_organization_user_roles(org_code, user_id, opts = {})
      data, _status_code, _headers = get_organization_user_roles_with_http_info(org_code, user_id, opts)
      data
    end

    # List Organization User Roles
    # Get roles for an organization user.
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetOrganizationsUserRolesResponse, Integer, Hash)>] GetOrganizationsUserRolesResponse data, response status code and response headers
    def get_organization_user_roles_with_http_info(org_code, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization_user_roles ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.get_organization_user_roles"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'user_id' when calling OrganizationsApi.get_organization_user_roles"
      end

      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}/roles'.sub('{org_code}', CGI.escape(org_code.to_s)).sub(
        '{user_id}', CGI.escape(user_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationsUserRolesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.get_organization_user_roles",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization_user_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Organization Users
    # Get users in an organization.
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @option opts [String] :permissions Filter by user permissions comma separated (where all match)
    # @option opts [String] :roles Filter by user roles comma separated (where all match)
    # @return [GetOrganizationUsersResponse]
    def get_organization_users(org_code, opts = {})
      data, _status_code, _headers = get_organization_users_with_http_info(org_code, opts)
      data
    end

    # List Organization Users
    # Get users in an organization.
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @option opts [String] :permissions Filter by user permissions comma separated (where all match)
    # @option opts [String] :roles Filter by user roles comma separated (where all match)
    # @return [Array<(GetOrganizationUsersResponse, Integer, Hash)>] GetOrganizationUsersResponse data, response status code and response headers
    def get_organization_users_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organization_users ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.get_organization_users"
      end

      allowable_values = %w[name_asc name_desc email_asc email_desc]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users'.sub('{org_code}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:page_size] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:next_token] = opts[:next_token] unless opts[:next_token].nil?
      query_params[:permissions] = opts[:permissions] unless opts[:permissions].nil?
      query_params[:roles] = opts[:roles] unless opts[:roles].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationUsersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.get_organization_users",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organization_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # List Organizations
    # Get a list of organizations.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @return [GetOrganizationsResponse]
    def get_organizations(opts = {})
      data, _status_code, _headers = get_organizations_with_http_info(opts)
      data
    end

    # List Organizations
    # Get a list of organizations.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort Field and order to sort the result by.
    # @option opts [Integer] :page_size Number of results per page. Defaults to 10 if parameter not sent.
    # @option opts [String] :next_token A string to get the next page of results if there are more results.
    # @return [Array<(GetOrganizationsResponse, Integer, Hash)>] GetOrganizationsResponse data, response status code and response headers
    def get_organizations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.get_organizations ...'
      end
      allowable_values = %w[name_asc name_desc email_asc email_desc]
      if @api_client.config.client_side_validation && opts[:sort] && !allowable_values.include?(opts[:sort])
        raise ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end

      # resource path
      local_var_path = '/api/v1/organizations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:sort] = opts[:sort] unless opts[:sort].nil?
      query_params[:page_size] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:next_token] = opts[:next_token] unless opts[:next_token].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrganizationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.get_organizations",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#get_organizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Remove Organization User
    # Remove user from an organization.
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def remove_organization_user(org_code, user_id, opts = {})
      data, _status_code, _headers = remove_organization_user_with_http_info(org_code, user_id, opts)
      data
    end

    # Remove Organization User
    # Remove user from an organization.
    # @param org_code [String] The organization&#39;s code.
    # @param user_id [String] The user&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def remove_organization_user_with_http_info(org_code, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.remove_organization_user ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.remove_organization_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'user_id' when calling OrganizationsApi.remove_organization_user"
      end

      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users/{user_id}'.sub('{org_code}', CGI.escape(org_code.to_s)).sub(
        '{user_id}', CGI.escape(user_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.remove_organization_user",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#remove_organization_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update Organization
    # Update an organization.
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateOrganizationRequest] :update_organization_request Organization details.
    # @return [SuccessResponse]
    def update_organization(org_code, opts = {})
      data, _status_code, _headers = update_organization_with_http_info(org_code, opts)
      data
    end

    # Update Organization
    # Update an organization.
    # @param org_code [String] The identifier for the organization.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateOrganizationRequest] :update_organization_request Organization details.
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_organization_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.update_organization ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.update_organization"
      end

      # resource path
      local_var_path = '/api/v1/organization/{org_code}'.sub('{org_code}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:update_organization_request])

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.update_organization",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#update_organization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update Organization Feature Flag Override
    # Update organization feature flag override.
    # @param org_code [String] The identifier for the organization
    # @param feature_flag_key [String] The identifier for the feature flag
    # @param value [String] Override value
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def update_organization_feature_flag_override(org_code, feature_flag_key, value, opts = {})
      data, _status_code, _headers = update_organization_feature_flag_override_with_http_info(org_code,
                                                                                              feature_flag_key, value, opts)
      data
    end

    # Update Organization Feature Flag Override
    # Update organization feature flag override.
    # @param org_code [String] The identifier for the organization
    # @param feature_flag_key [String] The identifier for the feature flag
    # @param value [String] Override value
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Integer, Hash)>] SuccessResponse data, response status code and response headers
    def update_organization_feature_flag_override_with_http_info(org_code, feature_flag_key, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.update_organization_feature_flag_override ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.update_organization_feature_flag_override"
      end
      # verify the required parameter 'feature_flag_key' is set
      if @api_client.config.client_side_validation && feature_flag_key.nil?
        raise ArgumentError,
              "Missing the required parameter 'feature_flag_key' when calling OrganizationsApi.update_organization_feature_flag_override"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        raise ArgumentError,
              "Missing the required parameter 'value' when calling OrganizationsApi.update_organization_feature_flag_override"
      end

      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/feature_flags/{feature_flag_key}'.sub('{org_code}', CGI.escape(org_code.to_s)).sub(
        '{feature_flag_key}', CGI.escape(feature_flag_key.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:value] = value

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.update_organization_feature_flag_override",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#update_organization_feature_flag_override\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Update Organization Users
    # Update users that belong to an organization.
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateOrganizationUsersRequest] :update_organization_users_request
    # @return [UpdateOrganizationUsersResponse]
    def update_organization_users(org_code, opts = {})
      data, _status_code, _headers = update_organization_users_with_http_info(org_code, opts)
      data
    end

    # Update Organization Users
    # Update users that belong to an organization.
    # @param org_code [String] The organization&#39;s code.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateOrganizationUsersRequest] :update_organization_users_request
    # @return [Array<(UpdateOrganizationUsersResponse, Integer, Hash)>] UpdateOrganizationUsersResponse data, response status code and response headers
    def update_organization_users_with_http_info(org_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrganizationsApi.update_organization_users ...'
      end
      # verify the required parameter 'org_code' is set
      if @api_client.config.client_side_validation && org_code.nil?
        raise ArgumentError,
              "Missing the required parameter 'org_code' when calling OrganizationsApi.update_organization_users"
      end

      # resource path
      local_var_path = '/api/v1/organizations/{org_code}/users'.sub('{org_code}', CGI.escape(org_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:update_organization_users_request])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateOrganizationUsersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OrganizationsApi.update_organization_users",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrganizationsApi#update_organization_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
