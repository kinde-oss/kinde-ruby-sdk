# frozen_string_literal: true

# #Kinde Management API
#
# Provides endpoints to manage your Kinde Businesses
#
# The version of the OpenAPI document: 1
# Contact: support@kinde.com
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 7.0.0-SNAPSHOT
#

require 'cgi'

module KindeApi
  class OAuthApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get User Profile
    # Contains the id, names and email of the currently logged in user.
    # @param [Hash] opts the optional parameters
    # @return [UserProfile]
    def get_user(opts = {})
      data, _status_code, _headers = get_user_with_http_info(opts)
      data
    end

    # Get User Profile
    # Contains the id, names and email of the currently logged in user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserProfile, Integer, Hash)>] UserProfile data, response status code and response headers
    def get_user_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: OAuthApi.get_user ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/oauth2/user_profile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserProfile'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OAuthApi.get_user",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Returns the details of the currently logged in user
    # Contains the id, names, profile picture URL and email of the currently logged in user.
    # @param [Hash] opts the optional parameters
    # @return [UserProfileV2]
    def get_user_profile_v2(opts = {})
      data, _status_code, _headers = get_user_profile_v2_with_http_info(opts)
      data
    end

    # Returns the details of the currently logged in user
    # Contains the id, names, profile picture URL and email of the currently logged in user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserProfileV2, Integer, Hash)>] UserProfileV2 data, response status code and response headers
    def get_user_profile_v2_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: OAuthApi.get_user_profile_v2 ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/oauth2/v2/user_profile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserProfileV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OAuthApi.get_user_profile_v2",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApi#get_user_profile_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get token details
    # Retrieve information about the provided token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The token to be introspected.
    # @option opts [String] :token_type The provided token&#39;s type.
    # @return [TokenIntrospect]
    def token_introspection(opts = {})
      data, _status_code, _headers = token_introspection_with_http_info(opts)
      data
    end

    # Get token details
    # Retrieve information about the provided token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The token to be introspected.
    # @option opts [String] :token_type The provided token&#39;s type.
    # @return [Array<(TokenIntrospect, Integer, Hash)>] TokenIntrospect data, response status code and response headers
    def token_introspection_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: OAuthApi.token_introspection ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/oauth2/introspect'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['token'] = opts[:token] unless opts[:token].nil?
      form_params['token_type'] = opts[:token_type] unless opts[:token_type].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TokenIntrospect'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OAuthApi.token_introspection",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApi#token_introspection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Revoke token
    # Revoke a previously issued token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The token to be revoked.
    # @option opts [String] :client_id The identifier for your client.
    # @option opts [String] :client_secret The secret associated with your client.
    # @return [nil]
    def token_revocation(opts = {})
      token_revocation_with_http_info(opts)
      nil
    end

    # Revoke token
    # Revoke a previously issued token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token The token to be revoked.
    # @option opts [String] :client_id The identifier for your client.
    # @option opts [String] :client_secret The secret associated with your client.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def token_revocation_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: OAuthApi.token_revocation ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/oauth2/revoke'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] =
        @api_client.select_header_accept(['application/json', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      header_params['Content-Type'] = content_type unless content_type.nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['token'] = opts[:token] unless opts[:token].nil?
      form_params['client_id'] = opts[:client_id] unless opts[:client_id].nil?
      form_params['client_secret'] = opts[:client_secret] unless opts[:client_secret].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['kindeBearerAuth']

      new_options = opts.merge(
        operation: :"OAuthApi.token_revocation",
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApi#token_revocation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
